#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use feature 'say';
use strict;
use warnings FATAL => 'all';

use Getopt::Long;
use Carp;
use Data::Dumper;
use Text::Table;
use CIF::StorageFactory;
use YAML::Tiny;

use CIF qw/$Logger init_logging/;

my $help;
my $remote          = 'localhost:9200';
my $storage         = 'elasticsearch';
my $debug           = 0;
my $verbosity       = 0;
my $config          = $ENV{'HOME'}.'/.cif.yml';
my $token;
my $action;
my $localmode;
my $generate;

Getopt::Long::Configure("bundling");
GetOptions(
    'help|h'            => \$help, 
    'config|C=s'        => \$config,
    'debug|d'           => \$debug,
    'verbosity|v+'      => \$verbosity,
    'localmode'         => \$localmode,
    
    'token=s'           => \$token->{'token'},
    'username=s'        => \$token->{'username'},
    'groups=s'          => \$token->{'groups'} || '',
    'expires=s'         => \$token->{'expires'},
    'admin'             => \$token->{'admin'},
    'read'              => \$token->{'read'},
    'write'             => \$token->{'write'},
    'acl'               => \$token->{'acl'},
    
    'new'               => \$action->{'new'},
    'delete'            => \$action->{'delete'},
    'list'              => \$action->{'list'},
    'revoke'            => \$action->{'revoke'},
    
    'generate-config-path=s'    => \$generate->{'path'},
    'generate-config-remote=s'  => \$generate->{'remote'},
    'generate-config-tls=i'       => \$generate->{'tls'},
    
    'storage=s'         => \$storage,
    'storage-host=s'    => \$remote,
    
) or die(usage());

die(usage()) if($help);
die(usage()) unless($action);

croak(usage()."\n\nERROR: --new and --delete are mutually exclusive") if($action->{'new'} && $action->{'delete'});

croak(usage()."\n\nERROR: missing --username") if(($action->{'new'} || $action->{'delete'}) && !$token->{'username'});

my $loglevel = ($debug) ? 'DEBUG' : 'INFO';

init_logging(
    { 
        level       => $loglevel,
        category    => 'cif-tokens',
    },
);

if($verbosity){
    unless($debug){ # we're already at TRACE
        $Logger->more_logging($verbosity);
    }
}

if($generate){
    $generate->{'remote'} = 'https://localhost' unless($generate->{'remote'});
    $generate->{'tls'} = 1 unless(defined($generate->{'tls'}));
}

sub usage {
    return <<EOF;

Usage: $0 [OPTION]

Options:

    -h, --help      this message     
   
    --username      specify a username
    --admin         set the admin flag for the user
    --read          set read permissions for a token
    --write         set write permissions for a token
    --expires       set an expiration date for the token
    
Actions:

    --new           generate a new token               
    --delete        remove token
    --revoke        revoke a user / token
    
Advanced:

    --generate-config-path      generate a new config with token
    --generate-config-remote    default: https://localhost
    --generate-config-tls       default: true

Storage:

    --storage       default: $storage
    --storage-host  default: $remote

 Examples:
    $0 --new --user me\@example.com --expires 2016-07-01 --admin

EOF
}

$storage = CIF::StorageFactory->new_plugin({ 
    plugin => $storage,
    nodes  => [ $remote ],
});

my $rv;
my @cols = ('username','groups','admin','read','write','acl','expires','revoked','token');

if($action->{'delete'}){
    $rv = $storage->token_delete({
        Username    => $token->{'username'},
        Token       => $token->{'token'},
    });
    if($rv){
        $Logger->info(($#{$rv} + 1).' tokens deleted...');
        exit(0);
    } else {
        $Logger->info('no tokens found...');
        exit(0);
    }
}
if($action->{'new'}){
    $token->{'groups'} = [split(/,/,$token->{'groups'})] if($token->{'groups'});
    $rv = $storage->token_new({
        Username    => $token->{'username'},
        admin       => $token->{'admin'},
        Expires     => $token->{'expires'},
        'read'      => $token->{'read'},
        'write'     => $token->{'write'},
        acl         => $token->{'acl'},
        groups      => $token->{'groups'},
    });
    unless($rv){
        $Logger->info('failed to generate new token...');
        exit(-1);
    }
    if($generate->{'path'}){
        $Logger->info('writing config to: '.$generate->{'path'});
        my $yaml = YAML::Tiny->new({ 
            client => {
                remote          => $generate->{'remote'},
                token           => $rv,
            }
        });
        if($generate->{'remote'} eq 'https://localhost'){
            $yaml->[0]->{'client'}->{'no_verify_ssl'} = 1;
        }
        $yaml->write($generate->{'path'});
    }
}

if($action->{'revoke'}){
    $rv = $storage->token_edit({
        Token       => $token->{'token'},
        Username    => $token->{'username'},
        revoked => 1,
    });
}

$rv = $storage->token_list({ Username => $token->{'username'}, Token => $token->{'token'} });

if($rv){
    my $t = Text::Table->new(@cols);
    foreach my $r (@$rv){
        my @list;
        foreach my $c (@cols){
            $r->{$c} = 'yes' if($r->{$c} && $r->{$c} eq 1);
           if(ref($r->{$c}) eq 'ARRAY'){
                $r->{$c} = join(',',@{$r->{$c}}); 
           }
            push(@list, $r->{$c});
        }
        $t->load(\@list);
    }
    say $t;
} else {
    $Logger->info('no tokens found...');
}
