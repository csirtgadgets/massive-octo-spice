#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use strict;
use warnings;

use CIF qw/init_logging $Logger/;
use CIF::Router;
use Getopt::Long;
use AnyEvent;
use Daemon::Control;
use Try::Tiny;
use Data::Dumper;

my $help;
my $frontend        = CIF::Router::DEFAULT_FRONTEND_LISTEN();
my $backend         = CIF::Router::DEFAULT_BACKEND_LISTEN();
my $storage         = 'elasticsearch';
my $storage_host    = 'localhost:9200';
my $auth            = 'dummy',
my $config          = "$CIF::EtcPath/cif-router.conf";

# daemon
my $daemon          = 0;
my $pidfile         = $CIF::PidPath.'/cif-router.pid';
my $user            = $CIF::CIF_USER;
my $group           = $CIF::CIF_GROUP;

# notification
my $notify;
my $notify_to       = 'root@localhost';
my $notify_subj     = '[cif-router] ERROR';
my $notify_from     = 'cif';
my $notify_level    = 'error';

# logging
my $debug           = 0;
my $verbosity       = 0;
my $logging         = 0;
my $logfile         = $CIF::LogPath.'/cif-router.log';

Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h'        => \$help, 
    'config|C=s'    => \$config,
    'frontend|F=s'  => \$frontend,
    'backend|B=s'   => \$backend,
    'auth|a=s'      => \$auth,

    # storage
    'storage|s=s'      => \$storage,
    'storage-host=s'   => \$storage_host,
    
    # daemon opts
    'daemon|D'      => \$daemon,
    'pidfile|p=s'   => \$pidfile,
    'user|u=s'      => \$user,
    'group|g=s'     => \$group,
    
    #notification
    'notify'        => \$notify,
    'notify-to=s'   => \$notify_to,
    'notify-subj=s' => \$notify_subj,
    'notify-from=s' => \$notify_from,
    
    # logging
    'verbosity|v+'  => \$verbosity,
    'debug|d'       => \$debug,
    'logging'       => \$logging,
    'logfile=s'     => \$logfile,
) or die(usage());

die(usage()) if($help);

sub usage {
    return <<EOF;

Usage: $0 [OPTIONS] [status|start|stop|restart|reload]

 Options:
    -F,  --frontend=STRING   specify the frontend binding, default: $frontend
    -B,  --backend=STRING    specify the backend binding, default: $backend
    -C,  --config=FILE       specify cofiguration file, default: $config
    -d,  --debug             turn on debugging (max verbosity)
    -v+, --verbosity         turn up verbosity
    -h,  --help              this message
    
 Daemon Options:
    -D, --daemon            run as daemon
    -u, --user              run daemon as user, default: $user
    -g, --group             run daemon as group, default: $group
    -p, --pid               pidfile location, default: $pidfile
    --logging               turn on logging [to file]
    --logfile               logfile location, default: $logfile
    
 Notification Options:
    --notify:               turn on notification, default: off.
    --notify-to:            default: $notify_to
    --notify-from:          default: $notify_from
    --notify-subj:          default: $notify_subj
    --notify-level:         default: $notify_level
    
 Advanced Options:
    -A, --auth              specify authorization plugin, default: $auth

 Storage:
    -s, --storage           default: $storage
    --storage-host          default: $storage_host

 Examples:
    $0 -C $config
    $0 -D start -C $config -p $pidfile

EOF
}

my $loglevel = ($debug) ? 'DEBUG' : 'INFO';

if($notify){
    $notify = { 
        to          => $notify_to, 
        from        => $notify_from, 
        subject     => $notify_subj, 
        min_level   => lc($notify_level) }
}

init_logging(
    { 
        level       => $loglevel,
        catagory	=> 'cif-router',
        filename    => ($logging) ? $logfile : 0,
    },
    $notify,   
);

if($verbosity){
    unless($debug){ # we're already at TRACE
        $Logger->more_logging($verbosity);
    }
}

if($daemon){
    $ARGV[0] = 'start' unless($ARGV);

    my $r = Daemon::Control->new(
        name    => 'cif-router',
        program => sub { main() },
        
        pid_file    => $pidfile,
        fork        => 2,
        
        user         => $user,
        group        => $group,
    )->run();
} else {
    main();
}

$Logger->info('shutting down...');

sub main {
    my $done    = AnyEvent->condvar();
    
    my $router  = CIF::Router->new({
        frontend_listen => $frontend,
        backend_listen  => $backend,
        auth            => $auth,
        storage         => $storage,
        storage_host    => $storage_host,
    });
    
    my ($err,$rv);
    
    do {
        $Logger->info('retrying...') if($err);
        try {
            $rv = $router->startup();
        } catch {
            $err = shift;
        };
        unless($rv){
            $Logger->warn($err) if($err);
            $Logger->warn('retrying in 5secs...');
            sleep(5);
            $err = undef;
        }
    } until($rv);
    
    $done->recv();
}
